{"version":3,"sources":["components/InputCity.js","components/ForecastItem.js","components/ForecastList.js","App.js","index.js"],"names":["InputCity","props","useState","city","setCity","onSubmit","event","preventDefault","type","placeholder","value","onChange","target","ForecastItem","icon","date","moment","format","className","alt","src","description","Math","round","temp","ForecastList","error","setError","loading","setLoading","forecasts","setForecasts","sendRequest","url","a","fetch","then","response","json","data","weatherURL","lat","lon","useEffect","undefined","message","App","setData","longitude","latitude","setLongitude","setLatitude","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAEaA,EAAY,SAACC,GACxB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAKMC,EAAW,SAACC,GAChBA,EAAMC,iBACNN,EAAMI,SAASF,IAEjB,OACE,sBAAME,SAAUA,EAAhB,SACE,uBACEG,KAAK,OACLC,YAAaR,EAAME,KACnBO,MAAOP,EACPQ,SAbW,SAACL,GAChBF,EAAQE,EAAMM,OAAOF,QAajBL,SAAUA,O,uCCfLQ,G,KAAe,SAACZ,GAC3B,IAAMa,EAAI,kBAAcb,EAAMa,KAApB,QAEJC,EAAOC,IAAoB,IAAbf,EAAMc,MAAaE,OAAO,SAE9C,OACE,sBAAKC,UAAU,gBAAf,UACE,mBAAGA,UAAU,qBAAb,SAAmCH,IACnC,qBAAKG,UAAU,OAAOC,IAAI,OAAOC,IAAKN,IACtC,mBAAGI,UAAU,4BAAb,SAA0CjB,EAAMoB,cAChD,sBAAKH,UAAU,wBAAf,UAAwCI,KAAKC,MAAMtB,EAAMuB,MAAzD,eCVOC,EAAe,SAACxB,GAC3B,MAA0BC,mBAAS,MAAnC,mBAAOwB,EAAP,KAAcC,EAAd,KACA,EAA8BzB,oBAAS,GAAvC,mBAAO0B,EAAP,KAAgBC,EAAhB,KACA,EAAkC3B,mBAAS,MAA3C,mBAAO4B,EAAP,KAAkBC,EAAlB,KAEMC,EAAW,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACZC,MAAMF,GACTG,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MACC,SAACG,GACCV,GAAW,GACXE,EAAaQ,MAEf,SAACb,GACCC,EAASD,GACTG,GAAW,MAVC,2CAAH,sDAcXW,EAAU,8DAA0DvC,EAAMwC,IAAhE,gBAA2ExC,EAAMyC,IAAjF,gFAQhB,OANAC,qBAAU,gBACUC,IAAd3C,EAAMwC,UAAmCG,IAAd3C,EAAMyC,KACnCV,EAAYQ,KAEb,CAACA,EAAYvC,EAAMwC,IAAKxC,EAAMyC,MAE7BhB,EACK,qBAAIR,UAAU,UAAd,oBAAgCQ,EAAMmB,WACnCjB,EAEDE,EAEP,sBAAKZ,UAAU,gBAAf,UACE,cAAC,EAAD,CACEH,KAAMe,EAAS,MAAU,GAAnB,GACNT,YAAaS,EAAS,MAAU,GAAnB,QAAiC,GAAjC,YACbN,KAAMM,EAAS,MAAU,GAAnB,SACNhB,KAAMgB,EAAS,MAAU,GAAnB,QAAiC,GAAjC,OAER,cAAC,EAAD,CACEf,KAAMe,EAAS,MAAU,GAAnB,GACNT,YAAaS,EAAS,MAAU,GAAnB,QAAiC,GAAjC,YACbN,KAAMM,EAAS,MAAU,GAAnB,SACNhB,KAAMgB,EAAS,MAAU,GAAnB,QAAiC,GAAjC,OAER,cAAC,EAAD,CACEf,KAAMe,EAAS,MAAU,GAAnB,GACNT,YAAaS,EAAS,MAAU,GAAnB,QAAiC,GAAjC,YACbN,KAAMM,EAAS,MAAU,GAAnB,SACNhB,KAAMgB,EAAS,MAAU,GAAnB,QAAiC,GAAjC,UAKL,wBAzBA,qBAAKZ,UAAU,UAAf,yBCmCI4B,MAhEf,WACE,IAGA,EAA0B5C,mBAAS,MAAnC,mBAAOwB,EAAP,KAAcC,EAAd,KACA,EAA8BzB,oBAAS,GAAvC,mBAAO0B,EAAP,KAAgBC,EAAhB,KACA,EAAwB3B,mBAAS,IAAjC,mBAAOqC,EAAP,KAAaQ,EAAb,KAEMf,EAAc,SAACC,GACnBE,MAAMF,GACHG,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MACC,SAACG,GACCV,GAAW,GACXkB,EAAQR,GACJA,EAAKS,WAAaT,EAAKU,UACzBC,EAAaX,EAAKS,WAClBG,EAAYZ,EAAKU,WACRV,EAAK,GAAGE,KAAOF,EAAK,GAAGG,MAChCQ,EAAaX,EAAK,GAAGG,KACrBS,EAAYZ,EAAK,GAAGE,SAGxB,SAACf,GACCC,EAASD,GACTG,GAAW,OAKnBc,qBAAU,WACRX,EA7BA,wFA8BC,IAEH,MAAgC9B,mBAASqC,EAAKU,UAA9C,mBAAOA,EAAP,KAAiBE,EAAjB,KACA,EAAkCjD,mBAASqC,EAAKS,WAAhD,mBAAOA,EAAP,KAAkBE,EAAlB,KAeA,YAbkBN,IAAdL,EAAKpC,MACPiD,QAAQC,IAAId,EAAKS,UAAWT,EAAKS,UAAWT,EAAKpC,MAY/CuB,EACK,qBAAIR,UAAU,UAAd,oBAAgCQ,EAAMmB,WACnCjB,EAIR,sBAAKV,UAAU,MAAf,UACE,cAAC,EAAD,CAAWf,KAAMoC,EAAKpC,KAAME,SAhBjB,SAACF,GAChBiD,QAAQC,IAAIlD,GACZ6B,EAAY,mDAAD,OAC0C7B,EAD1C,uDAeP,cAAC,EAAD,CAAcsC,IAAKQ,EAAUP,IAAKM,OAL/B,oBAAI9B,UAAU,UAAd,yBCrDXoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.9c913d8f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport const InputCity = (props) => {\r\n  const [city, setCity] = useState(\"\");\r\n\r\n  const onChange = (event) => {\r\n    setCity(event.target.value);\r\n  };\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    props.onSubmit(city);\r\n  };\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder={props.city}\r\n        value={city}\r\n        onChange={onChange}\r\n        onSubmit={onSubmit}\r\n      ></input>\r\n    </form>\r\n  );\r\n};\r\n","import moment from \"moment\";\r\nimport React from \"react\";\r\nimport \"./forecastStyles.css\";\r\n\r\nexport const ForecastItem = (props) => {\r\n  const icon = `/assets/${props.icon}.svg`;\r\n\r\n  const date = moment(props.date * 1000).format(\"DD.MM\");\r\n\r\n  return (\r\n    <div className=\"forecast-item\">\r\n      <p className=\"forecast-item-date\">{date}</p>\r\n      <img className=\"icon\" alt=\"icon\" src={icon} />\r\n      <p className=\"forecast-item-description\">{props.description}</p>\r\n      <div className=\"forecast-item-content\">{Math.round(props.temp)}Â°</div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { ForecastItem } from \"./ForecastItem\";\r\nimport \"./forecastStyles.css\";\r\n\r\nexport const ForecastList = (props) => {\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [forecasts, setForecasts] = useState(null);\r\n\r\n  const sendRequest = async (url) => {\r\n    await fetch(url)\r\n      .then((response) => response.json())\r\n      .then(\r\n        (data) => {\r\n          setLoading(true);\r\n          setForecasts(data);\r\n        },\r\n        (error) => {\r\n          setError(error);\r\n          setLoading(true);\r\n        }\r\n      );\r\n  };\r\n  const weatherURL = `https://api.openweathermap.org/data/2.5/onecall?lat=${props.lat}&lon=${props.lon}&exclude=hourly,minutely&units=metric&appid=78839745a89023129881747e0b14fefd`;\r\n\r\n  useEffect(() => {\r\n    if (props.lat !== undefined && props.lon !== undefined) {\r\n      sendRequest(weatherURL);\r\n    }\r\n  }, [weatherURL, props.lat, props.lon]);\r\n\r\n  if (error) {\r\n    return <h1 className=\"message\">Error: {error.message}</h1>;\r\n  } else if (!loading) {\r\n    return <div className=\"message\">Loading...</div>;\r\n  } else if (forecasts) {\r\n    return (\r\n      <div className=\"forecast-list\">\r\n        <ForecastItem\r\n          date={forecasts[\"daily\"][0][\"dt\"]}\r\n          description={forecasts[\"daily\"][0][\"weather\"][0][\"description\"]}\r\n          temp={forecasts[\"daily\"][0][\"temp\"][\"day\"]}\r\n          icon={forecasts[\"daily\"][0][\"weather\"][0][\"icon\"]}\r\n        />\r\n        <ForecastItem\r\n          date={forecasts[\"daily\"][1][\"dt\"]}\r\n          description={forecasts[\"daily\"][1][\"weather\"][0][\"description\"]}\r\n          temp={forecasts[\"daily\"][1][\"temp\"][\"day\"]}\r\n          icon={forecasts[\"daily\"][1][\"weather\"][0][\"icon\"]}\r\n        />\r\n        <ForecastItem\r\n          date={forecasts[\"daily\"][2][\"dt\"]}\r\n          description={forecasts[\"daily\"][2][\"weather\"][0][\"description\"]}\r\n          temp={forecasts[\"daily\"][2][\"temp\"][\"day\"]}\r\n          icon={forecasts[\"daily\"][2][\"weather\"][0][\"icon\"]}\r\n        />\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div></div>;\r\n  }\r\n};\r\n","import \"./App.css\";\nimport { InputCity } from \"./components/InputCity.js\";\nimport { ForecastList } from \"./components/ForecastList.js\";\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const geolocationURL =\n    \"https://ipgeolocation.abstractapi.com/v1/?api_key=0114551861ca4ad5b222750b725754a6\";\n\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState([]);\n\n  const sendRequest = (url) => {\n    fetch(url)\n      .then((response) => response.json())\n      .then(\n        (data) => {\n          setLoading(true);\n          setData(data);\n          if (data.longitude && data.latitude) {\n            setLongitude(data.longitude);\n            setLatitude(data.latitude);\n          } else if (data[0].lat && data[0].lon) {\n            setLongitude(data[0].lon);\n            setLatitude(data[0].lat);\n          }\n        },\n        (error) => {\n          setError(error);\n          setLoading(true);\n        }\n      );\n  };\n\n  useEffect(() => {\n    sendRequest(geolocationURL);\n  }, []);\n\n  const [latitude, setLatitude] = useState(data.latitude);\n  const [longitude, setLongitude] = useState(data.longitude);\n\n  if (data.city !== undefined) {\n    console.log(data.longitude, data.longitude, data.city);\n  }\n\n  const onSubmit = (city) => {\n    console.log(city);\n    sendRequest(\n      `https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=5&appid=78839745a89023129881747e0b14fefd`\n    );\n    // setLongitude(data[0].lon);\n    // setLatitude(data[0].lat);\n  };\n\n  if (error) {\n    return <h1 className=\"message\">Error: {error.message}</h1>;\n  } else if (!loading) {\n    return <h1 className=\"message\">Loading...</h1>;\n  } else {\n    return (\n      <div className=\"App\">\n        <InputCity city={data.city} onSubmit={onSubmit} />\n        <ForecastList lat={latitude} lon={longitude} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}